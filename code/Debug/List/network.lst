
AVRASM ver. 2.1.30  Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm Tue Apr 14 14:23:29 2020

Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1088): warning: Register r5 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1089): warning: Register r6 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1090): warning: Register r7 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1091): warning: Register r8 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1092): warning: Register r9 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1093): warning: Register r10 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1094): warning: Register r11 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1095): warning: Register r4 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1096): warning: Register r13 already defined by the .DEF directive
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _key=R5
                 	.DEF _ind=R6
                 	.DEF _ind_msb=R7
                 	.DEF _dest=R8
                 	.DEF _dest_msb=R9
                 	.DEF _addr=R10
                 	.DEF _addr_msb=R11
                 	.DEF _rx_wr_index=R4
                 	.DEF _rx_rd_index=R13
                 	.DEF _rx_counter=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0086 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00b3 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x0:
000039 4552
00003a 2043
00003b 7266
00003c 6d6f      	.DB  0x52,0x45,0x43,0x20,0x66,0x72,0x6F,0x6D
00003d 0020
00003e 6553
00003f 646e
000040 6e69      	.DB  0x20,0x0,0x53,0x65,0x6E,0x64,0x69,0x6E
000041 2067
000042 6f54
000043 0020
000044 6564      	.DB  0x67,0x20,0x54,0x6F,0x20,0x0,0x64,0x65
000045 7473
000046 003a
000047 7449
000048 7327      	.DB  0x73,0x74,0x3A,0x0,0x49,0x74,0x27,0x73
000049 6d20
00004a 0065
00004b 616d
00004c 2078      	.DB  0x20,0x6D,0x65,0x0,0x6D,0x61,0x78,0x20
00004d 6461
00004e 7264
00004f 7365
000050 2073      	.DB  0x61,0x64,0x64,0x72,0x65,0x73,0x73,0x20
000051 7369
000052 3320
000053 2500
000054 2564      	.DB  0x69,0x73,0x20,0x33,0x0,0x25,0x64,0x25
000055 4d64
000056 4753
000057 253a
000058 6573      	.DB  0x64,0x4D,0x53,0x47,0x3A,0x25,0x73,0x65
000059 5300
00005a 4e45
00005b 4944
00005c 474e      	.DB  0x0,0x53,0x45,0x4E,0x44,0x49,0x4E,0x47
00005d 5420
00005e 206f
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1154): warning: .cseg .db misalignment - padding zero byte
00005f 0000      	.DB  0x20,0x54,0x6F,0x20,0x0
                 _0x2000003:
000060 c080      	.DB  0x80,0xC0
                 _0x2040060:
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1158): warning: .cseg .db misalignment - padding zero byte
000061 0001      	.DB  0x1
                 _0x2040000:
000062 4e2d
000063 4e41
000064 4900
000065 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
Z:\education\term8\embeded\HW03\part3_network\code\Debug\List\network.asm(1161): warning: .cseg .db misalignment - padding zero byte
000066 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000067 0001      	.DW  0x01
000068 0002      	.DW  0x02
000069 0066      	.DW  __REG_BIT_VARS*2
                 
00006a 000a      	.DW  0x0A
00006b 0004      	.DW  0x04
00006c 0068      	.DW  __REG_VARS*2
                 
00006d 000a      	.DW  0x0A
00006e 0260      	.DW  _0x8
00006f 0072      	.DW  _0x0*2
                 
000070 000c      	.DW  0x0C
000071 026a      	.DW  _0x8+10
000072 007c      	.DW  _0x0*2+10
                 
000073 0006      	.DW  0x06
000074 0276      	.DW  _0x1C
000075 0088      	.DW  _0x0*2+22
                 
000076 0008      	.DW  0x08
000077 027c      	.DW  _0x1C+6
000078 008e      	.DW  _0x0*2+28
                 
000079 0011      	.DW  0x11
00007a 0284      	.DW  _0x1C+14
00007b 0096      	.DW  _0x0*2+36
                 
00007c 000c      	.DW  0x0C
00007d 0295      	.DW  _0x1C+31
00007e 00b3      	.DW  _0x0*2+65
                 
00007f 0002      	.DW  0x02
000080 02bd      	.DW  __base_y_G100
000081 00c0      	.DW  _0x2000003*2
                 
000082 0001      	.DW  0x01
000083 02c4      	.DW  __seed_G102
000084 00c2      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000085 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000086 94f8      	CLI
000087 27ee      	CLR  R30
000088 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000089 e0f1      	LDI  R31,1
00008a bffb      	OUT  GICR,R31
00008b bfeb      	OUT  GICR,R30
00008c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00008d e08d      	LDI  R24,(14-2)+1
00008e e0a2      	LDI  R26,2
00008f 27bb      	CLR  R27
                 __CLEAR_REG:
000090 93ed      	ST   X+,R30
000091 958a      	DEC  R24
000092 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000093 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000094 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000095 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000096 93ed      	ST   X+,R30
000097 9701      	SBIW R24,1
000098 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000099 ecee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00009a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00009b 9185      	LPM  R24,Z+
00009c 9195      	LPM  R25,Z+
00009d 9700      	SBIW R24,0
00009e f061      	BREQ __GLOBAL_INI_END
00009f 91a5      	LPM  R26,Z+
0000a0 91b5      	LPM  R27,Z+
0000a1 9005      	LPM  R0,Z+
0000a2 9015      	LPM  R1,Z+
0000a3 01bf      	MOVW R22,R30
0000a4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a5 9005      	LPM  R0,Z+
0000a6 920d      	ST   X+,R0
0000a7 9701      	SBIW R24,1
0000a8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a9 01fb      	MOVW R30,R22
0000aa cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ab e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ac bfed      	OUT  SPL,R30
0000ad e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ae bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000af e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b0 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b1 940c 0148 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;unsigned char message[20];
                 ;void keyboard(void);
                 ;unsigned char key;
                 ;unsigned int ind=0;
                 ;unsigned int dest=0;
                 ;unsigned int addr;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define RX_BUFFER_SIZE 8
                 ;
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;
                 ;unsigned char rx_counter=0;
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000b3 920a      	ST   -Y,R0
0000b4 921a      	ST   -Y,R1
0000b5 92fa      	ST   -Y,R15
0000b6 936a      	ST   -Y,R22
0000b7 937a      	ST   -Y,R23
0000b8 938a      	ST   -Y,R24
0000b9 939a      	ST   -Y,R25
0000ba 93aa      	ST   -Y,R26
0000bb 93ba      	ST   -Y,R27
0000bc 93ea      	ST   -Y,R30
0000bd 93fa      	ST   -Y,R31
0000be b7ef      	IN   R30,SREG
0000bf 93ea      	ST   -Y,R30
                 ; 0000 0021 char status,data;
                 ; 0000 0022 unsigned int dest;
                 ; 0000 0023 status=UCSRA;
0000c0 940e 04a8 	CALL __SAVELOCR4
                 ;	status -> R17
                 ;	data -> R16
                 ;	dest -> R18,R19
0000c2 b11b      	IN   R17,11
                 ; 0000 0024 data=UDR;
0000c3 b10c      	IN   R16,12
                 ; 0000 0025 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000c4 2fe1      	MOV  R30,R17
0000c5 71ec      	ANDI R30,LOW(0x1C)
0000c6 f489      	BRNE _0x3
                 ; 0000 0026    {
                 ; 0000 0027    rx_buffer[rx_wr_index++]=data;
0000c7 2de4      	MOV  R30,R4
0000c8 9443      	INC  R4
0000c9 e0f0      	LDI  R31,0
0000ca 54eb      	SUBI R30,LOW(-_rx_buffer)
0000cb 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000cc 8300      	ST   Z,R16
                 ; 0000 0028    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000cd e0e8      	LDI  R30,LOW(8)
0000ce 15e4      	CP   R30,R4
0000cf f409      	BRNE _0x4
0000d0 2444      	CLR  R4
                 ; 0000 0029    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
0000d1 94c3      	INC  R12
0000d2 e0e8      	LDI  R30,LOW(8)
0000d3 15ec      	CP   R30,R12
0000d4 f419      	BRNE _0x5
                 ; 0000 002A       {
                 ; 0000 002B       rx_counter=0;
0000d5 24cc      	CLR  R12
                 ; 0000 002C       rx_buffer_overflow=1;
0000d6 9468      	SET
0000d7 f820      	BLD  R2,0
                 ; 0000 002D       }
                 ; 0000 002E    }
                 _0x5:
                 ; 0000 002F 
                 ; 0000 0030    if(ind == 0){
                 _0x3:
0000d8 2c06      	MOV  R0,R6
0000d9 2807      	OR   R0,R7
0000da f4f9      	BRNE _0x6
                 ; 0000 0031         dest = getchar()-'0' ;
0000db d059      	RCALL _getchar
0000dc e0f0      	LDI  R31,0
0000dd 97f0      	SBIW R30,48
0000de 019f      	MOVW R18,R30
                 ; 0000 0032         ind+=1;
0000df 01f3      	MOVW R30,R6
0000e0 9631      	ADIW R30,1
0000e1 013f      	MOVW R6,R30
                 ; 0000 0033         if(dest==addr){
                +
0000e2 16a2     +CP R10 , R18
0000e3 06b3     +CPC R11 , R19
                 	__CPWRR 10,11,18,19
0000e4 f439      	BRNE _0x7
                 ; 0000 0034             lcd_puts("REC from ");
                +
0000e5 e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000e6 e0b2     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000e7 940e 027a 	CALL _lcd_puts
                 ; 0000 0035             lcd_gotoxy(0,1);
0000e9 940e 043d 	CALL SUBOPT_0x0
                 ; 0000 0036             }
                 ; 0000 0037         else{
0000eb c00e      	RJMP _0x9
                 _0x7:
                 ; 0000 0038             putchar(dest+'0');
0000ec 2fa2      	MOV  R26,R18
0000ed 5da0      	SUBI R26,-LOW(48)
0000ee 940e 02b7 	CALL _putchar
                 ; 0000 0039             lcd_clear();
0000f0 940e 024c 	CALL _lcd_clear
                 ; 0000 003A             lcd_puts("Sending To ");
                +
0000f2 e6aa     +LDI R26 , LOW ( _0x8 + ( 10 ) )
0000f3 e0b2     +LDI R27 , HIGH ( _0x8 + ( 10 ) )
                 	__POINTW2MN _0x8,10
0000f4 940e 027a 	CALL _lcd_puts
                 ; 0000 003B             lcd_putchar(dest+'0');
0000f6 2fa2      	MOV  R26,R18
0000f7 5da0      	SUBI R26,-LOW(48)
0000f8 940e 025a 	CALL _lcd_putchar
                 ; 0000 003C         }
                 _0x9:
                 ; 0000 003D    }
                 ; 0000 003E 
                 ; 0000 003F 
                 ; 0000 0040    message[ind] = getchar();
                 _0x6:
0000fa 01f3      	MOVW R30,R6
0000fb 55ef      	SUBI R30,LOW(-_message)
0000fc 4ffd      	SBCI R31,HIGH(-_message)
0000fd 93ff      	PUSH R31
0000fe 93ef      	PUSH R30
0000ff d035      	RCALL _getchar
000100 91af      	POP  R26
000101 91bf      	POP  R27
000102 93ec      	ST   X,R30
                 ; 0000 0041    if(message[ind]=='e'){
000103 940e 0442 	CALL SUBOPT_0x1
000105 36a5      	CPI  R26,LOW(0x65)
000106 f471      	BRNE _0xA
                 ; 0000 0042         ind = 0;
000107 2466      	CLR  R6
000108 2477      	CLR  R7
                 ; 0000 0043         lcd_gotoxy(0,0);
000109 e0e0      	LDI  R30,LOW(0)
00010a 93ea      	ST   -Y,R30
00010b e0a0      	LDI  R26,LOW(0)
00010c 940e 023b 	CALL _lcd_gotoxy
                 ; 0000 0044         if(dest!=addr) putchar('e');
                +
00010e 16a2     +CP R10 , R18
00010f 06b3     +CPC R11 , R19
                 	__CPWRR 10,11,18,19
000110 f019      	BREQ _0xB
000111 e6a5      	LDI  R26,LOW(101)
000112 940e 02b7 	CALL _putchar
                 ; 0000 0045     }
                 _0xB:
                 ; 0000 0046 
                 ; 0000 0047     else{
000114 c00f      	RJMP _0xC
                 _0xA:
                 ; 0000 0048         if(dest==addr)lcd_putchar(message[ind]);
                +
000115 16a2     +CP R10 , R18
000116 06b3     +CPC R11 , R19
                 	__CPWRR 10,11,18,19
000117 f429      	BRNE _0xD
000118 940e 0442 	CALL SUBOPT_0x1
00011a 940e 025a 	CALL _lcd_putchar
                 ; 0000 0049         else putchar(message[ind]);
00011c c004      	RJMP _0xE
                 _0xD:
00011d 940e 0442 	CALL SUBOPT_0x1
00011f 940e 02b7 	CALL _putchar
                 ; 0000 004A         ind+=1;
                 _0xE:
000121 01f3      	MOVW R30,R6
000122 9631      	ADIW R30,1
000123 013f      	MOVW R6,R30
                 ; 0000 004B     }
                 _0xC:
                 ; 0000 004C 
                 ; 0000 004D 
                 ; 0000 004E 
                 ; 0000 004F }
000124 940e 04af 	CALL __LOADLOCR4
000126 9624      	ADIW R28,4
000127 91e9      	LD   R30,Y+
000128 bfef      	OUT  SREG,R30
000129 91f9      	LD   R31,Y+
00012a 91e9      	LD   R30,Y+
00012b 91b9      	LD   R27,Y+
00012c 91a9      	LD   R26,Y+
00012d 9199      	LD   R25,Y+
00012e 9189      	LD   R24,Y+
00012f 9179      	LD   R23,Y+
000130 9169      	LD   R22,Y+
000131 90f9      	LD   R15,Y+
000132 9019      	LD   R1,Y+
000133 9009      	LD   R0,Y+
000134 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000260           	.BYTE 0x16
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0056 {
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0057 char data;
                 ; 0000 0058 while (rx_counter==0);
000135 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xF:
000136 20cc      	TST  R12
000137 f3f1      	BREQ _0xF
                 ; 0000 0059 data=rx_buffer[rx_rd_index++];
000138 2ded      	MOV  R30,R13
000139 94d3      	INC  R13
00013a e0f0      	LDI  R31,0
00013b 54eb      	SUBI R30,LOW(-_rx_buffer)
00013c 4ffd      	SBCI R31,HIGH(-_rx_buffer)
00013d 8110      	LD   R17,Z
                 ; 0000 005A #if RX_BUFFER_SIZE != 256
                 ; 0000 005B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
00013e e0e8      	LDI  R30,LOW(8)
00013f 15ed      	CP   R30,R13
000140 f409      	BRNE _0x12
000141 24dd      	CLR  R13
                 ; 0000 005C #endif
                 ; 0000 005D #asm("cli")
                 _0x12:
000142 94f8      	cli
                 ; 0000 005E --rx_counter;
000143 94ca      	DEC  R12
                 ; 0000 005F #asm("sei")
000144 9478      	sei
                 ; 0000 0060 return data;
000145 2fe1      	MOV  R30,R17
000146 9119      	LD   R17,Y+
000147 9508      	RET
                 ; 0000 0061 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void main(void)
                 ; 0000 0066 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0067 // Input/Output Ports initialization
                 ; 0000 0068 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000148 e0e0      	LDI  R30,LOW(0)
000149 bbea      	OUT  0x1A,R30
                 ; 0000 0069 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00014a bbeb      	OUT  0x1B,R30
                 ; 0000 006A 
                 ; 0000 006B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
00014b e0e3      	LDI  R30,LOW(3)
00014c bbe7      	OUT  0x17,R30
                 ; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00014d e0e0      	LDI  R30,LOW(0)
00014e bbe8      	OUT  0x18,R30
                 ; 0000 006D 
                 ; 0000 006E DDRC=(0<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00014f e7e8      	LDI  R30,LOW(120)
000150 bbe4      	OUT  0x14,R30
                 ; 0000 006F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000151 e0e0      	LDI  R30,LOW(0)
000152 bbe5      	OUT  0x15,R30
                 ; 0000 0070 
                 ; 0000 0071 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000153 bbe1      	OUT  0x11,R30
                 ; 0000 0072 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000154 bbe2      	OUT  0x12,R30
                 ; 0000 0073 
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 // USART initialization
                 ; 0000 0077 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0078 // USART Receiver: On
                 ; 0000 0079 // USART Transmitter: On
                 ; 0000 007A // USART Mode: Asynchronous
                 ; 0000 007B // USART Baud Rate: 4800
                 ; 0000 007C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000155 b9eb      	OUT  0xB,R30
                 ; 0000 007D UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000156 e9e8      	LDI  R30,LOW(152)
000157 b9ea      	OUT  0xA,R30
                 ; 0000 007E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000158 e8e6      	LDI  R30,LOW(134)
000159 bde0      	OUT  0x20,R30
                 ; 0000 007F UBRRH=0x00;
00015a e0e0      	LDI  R30,LOW(0)
00015b bde0      	OUT  0x20,R30
                 ; 0000 0080 UBRRL=0x0C;
00015c e0ec      	LDI  R30,LOW(12)
00015d b9e9      	OUT  0x9,R30
                 ; 0000 0081 
                 ; 0000 0082 
                 ; 0000 0083 // Alphanumeric LCD initialization
                 ; 0000 0084 // Connections are specified in the
                 ; 0000 0085 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0086 // RS - PORTA Bit 0
                 ; 0000 0087 // RD - PORTA Bit 1
                 ; 0000 0088 // EN - PORTA Bit 2
                 ; 0000 0089 // D4 - PORTA Bit 4
                 ; 0000 008A // D5 - PORTA Bit 5
                 ; 0000 008B // D6 - PORTA Bit 6
                 ; 0000 008C // D7 - PORTA Bit 7
                 ; 0000 008D // Characters/line: 16
                 ; 0000 008E lcd_init(16);
00015e e1a0      	LDI  R26,LOW(16)
00015f d12a      	RCALL _lcd_init
                 ; 0000 008F 
                 ; 0000 0090 // Global enable interrupts
                 ; 0000 0091 #asm("sei")
000160 9478      	sei
                 ; 0000 0092 
                 ; 0000 0093 addr = PINB.0+PINB.1*2;
000161 e0e0      	LDI  R30,0
000162 99b0      	SBIC 0x16,0
000163 e0e1      	LDI  R30,1
000164 2f6e      	MOV  R22,R30
000165 e0a0      	LDI  R26,0
000166 99b1      	SBIC 0x16,1
000167 e0a1      	LDI  R26,1
000168 e0e2      	LDI  R30,LOW(2)
000169 9fea      	MUL  R30,R26
00016a 01f0      	MOVW R30,R0
00016b 0fe6      	ADD  R30,R22
00016c 2eae      	MOV  R10,R30
00016d 24bb      	CLR  R11
                 ; 0000 0094 
                 ; 0000 0095 while (1)
                 _0x13:
                 ; 0000 0096     {
                 ; 0000 0097     while(1){
                 _0x16:
                 ; 0000 0098     key='';
00016e 2455      	CLR  R5
                 ; 0000 0099     keyboard();
00016f d069      	RCALL _keyboard
                 ; 0000 009A     if(key=='#')break;
000170 e2e3      	LDI  R30,LOW(35)
000171 15e5      	CP   R30,R5
000172 f099      	BREQ _0x18
                 ; 0000 009B 
                 ; 0000 009C     if(key!=''){
000173 2055      	TST  R5
000174 f071      	BREQ _0x1A
                 ; 0000 009D         if(message[0]=='\0')
000175 91e0 02a1 	LDS  R30,_message
000177 30e0      	CPI  R30,0
000178 f409      	BRNE _0x1B
                 ; 0000 009E             lcd_clear();
000179 d0d2      	RCALL _lcd_clear
                 ; 0000 009F         lcd_putchar(key);
                 _0x1B:
00017a 2da5      	MOV  R26,R5
00017b d0de      	RCALL _lcd_putchar
                 ; 0000 00A0         message[ind]=key;
00017c 01f3      	MOVW R30,R6
00017d 55ef      	SUBI R30,LOW(-_message)
00017e 4ffd      	SBCI R31,HIGH(-_message)
00017f 8250      	ST   Z,R5
                 ; 0000 00A1         ind+=1;
000180 01f3      	MOVW R30,R6
000181 9631      	ADIW R30,1
000182 013f      	MOVW R6,R30
                 ; 0000 00A2     }
                 ; 0000 00A3     delay_ms(200);
                 _0x1A:
000183 940e 0448 	CALL SUBOPT_0x2
                 ; 0000 00A4     }
000185 cfe8      	RJMP _0x16
                 _0x18:
                 ; 0000 00A5 
                 ; 0000 00A6     //assign destination
                 ; 0000 00A7     lcd_gotoxy(0,1);
000186 940e 043d 	CALL SUBOPT_0x0
                 ; 0000 00A8     lcd_puts("dest:");
                +
000188 e7a6     +LDI R26 , LOW ( _0x1C + ( 0 ) )
000189 e0b2     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
00018a d0ef      	RCALL _lcd_puts
                 ; 0000 00A9     key='';
00018b 2455      	CLR  R5
                 ; 0000 00AA     delay_ms(200);
00018c 940e 0448 	CALL SUBOPT_0x2
                 ; 0000 00AB     while(key == '')
                 _0x1D:
00018e 2055      	TST  R5
00018f f411      	BRNE _0x1F
                 ; 0000 00AC         keyboard();
000190 d048      	RCALL _keyboard
000191 cffc      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00AD dest=key - '0';
000192 2de5      	MOV  R30,R5
000193 e0f0      	LDI  R31,0
000194 97f0      	SBIW R30,48
000195 014f      	MOVW R8,R30
                 ; 0000 00AE     if(dest == addr)
                +
000196 14a8     +CP R10 , R8
000197 04b9     +CPC R11 , R9
                 	__CPWRR 10,11,8,9
000198 f439      	BRNE _0x20
                 ; 0000 00AF     {
                 ; 0000 00B0         lcd_clear();
000199 d0b2      	RCALL _lcd_clear
                 ; 0000 00B1         lcd_puts("It's me");
                +
00019a e7ac     +LDI R26 , LOW ( _0x1C + ( 6 ) )
00019b e0b2     +LDI R27 , HIGH ( _0x1C + ( 6 ) )
                 	__POINTW2MN _0x1C,6
00019c d0dd      	RCALL _lcd_puts
                 ; 0000 00B2         delay_ms(200);
00019d 940e 0448 	CALL SUBOPT_0x2
                 ; 0000 00B3     }
                 ; 0000 00B4      else if(dest > 3)
00019f c032      	RJMP _0x21
                 _0x20:
0001a0 e0e3      	LDI  R30,LOW(3)
0001a1 e0f0      	LDI  R31,HIGH(3)
0001a2 15e8      	CP   R30,R8
0001a3 05f9      	CPC  R31,R9
0001a4 f438      	BRSH _0x22
                 ; 0000 00B5     {
                 ; 0000 00B6         lcd_clear();
0001a5 d0a6      	RCALL _lcd_clear
                 ; 0000 00B7         lcd_puts("max address is 3");
                +
0001a6 e8a4     +LDI R26 , LOW ( _0x1C + ( 14 ) )
0001a7 e0b2     +LDI R27 , HIGH ( _0x1C + ( 14 ) )
                 	__POINTW2MN _0x1C,14
0001a8 d0d1      	RCALL _lcd_puts
                 ; 0000 00B8         delay_ms(200);
0001a9 940e 0448 	CALL SUBOPT_0x2
                 ; 0000 00B9     }
                 ; 0000 00BA     else {
0001ab c026      	RJMP _0x23
                 _0x22:
                 ; 0000 00BB     lcd_putchar(key);
0001ac 2da5      	MOV  R26,R5
0001ad d0ac      	RCALL _lcd_putchar
                 ; 0000 00BC     delay_ms(200);
0001ae 940e 0448 	CALL SUBOPT_0x2
                 ; 0000 00BD 
                 ; 0000 00BE     //sending message
                 ; 0000 00BF     printf("%d%dMSG:%se",dest,addr,message);
                +
0001b0 eae7     +LDI R30 , LOW ( 2 * _0x0 + ( 53 ) )
0001b1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW1FN _0x0,53
0001b2 93fa      	ST   -Y,R31
0001b3 93ea      	ST   -Y,R30
0001b4 01f4      	MOVW R30,R8
0001b5 940e 044c 	CALL SUBOPT_0x3
0001b7 01f5      	MOVW R30,R10
0001b8 940e 044c 	CALL SUBOPT_0x3
0001ba eae1      	LDI  R30,LOW(_message)
0001bb e0f2      	LDI  R31,HIGH(_message)
0001bc 940e 044c 	CALL SUBOPT_0x3
0001be e08c      	LDI  R24,12
0001bf 940e 03ff 	CALL _printf
0001c1 962e      	ADIW R28,14
                 ; 0000 00C0     lcd_clear();
0001c2 d089      	RCALL _lcd_clear
                 ; 0000 00C1     lcd_puts("SENDING To ");
                +
0001c3 e9a5     +LDI R26 , LOW ( _0x1C + ( 31 ) )
0001c4 e0b2     +LDI R27 , HIGH ( _0x1C + ( 31 ) )
                 	__POINTW2MN _0x1C,31
0001c5 d0b4      	RCALL _lcd_puts
                 ; 0000 00C2     lcd_putchar(dest+'0');
0001c6 2da8      	MOV  R26,R8
0001c7 5da0      	SUBI R26,-LOW(48)
0001c8 d091      	RCALL _lcd_putchar
                 ; 0000 00C3     delay_ms(20);
0001c9 e1a4      	LDI  R26,LOW(20)
0001ca e0b0      	LDI  R27,0
0001cb 940e 0487 	CALL _delay_ms
                 ; 0000 00C4     lcd_gotoxy(0,1);
0001cd 940e 043d 	CALL SUBOPT_0x0
                 ; 0000 00C5     lcd_puts(message);}
0001cf eaa1      	LDI  R26,LOW(_message)
0001d0 e0b2      	LDI  R27,HIGH(_message)
0001d1 d0a8      	RCALL _lcd_puts
                 _0x23:
                 _0x21:
                 ; 0000 00C6 
                 ; 0000 00C7     //prepare situation for next round
                 ; 0000 00C8     message[0] ='\0';
0001d2 e0e0      	LDI  R30,LOW(0)
0001d3 93e0 02a1 	STS  _message,R30
                 ; 0000 00C9     ind = 0;
0001d5 2466      	CLR  R6
0001d6 2477      	CLR  R7
                 ; 0000 00CA 
                 ; 0000 00CB       }
0001d7 cf96      	RJMP _0x13
                 ; 0000 00CC }
                 _0x24:
0001d8 cfff      	RJMP _0x24
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000276           	.BYTE 0x2B
                 ;
                 ;void keyboard(void){
                 ; 0000 00CE void keyboard(void){
                 
                 	.CSEG
                 _keyboard:
                 ; .FSTART _keyboard
                 ; 0000 00CF     //Row1
                 ; 0000 00D0     PORTC.3=0;
0001d9 98ab      	CBI  0x15,3
                 ; 0000 00D1     delay_ms(2);
0001da 940e 0451 	CALL SUBOPT_0x4
                 ; 0000 00D2     if(PINC.0==0)key='1';
0001dc 9998      	SBIC 0x13,0
0001dd c002      	RJMP _0x27
0001de e3e1      	LDI  R30,LOW(49)
0001df c007      	RJMP _0x49
                 ; 0000 00D3     else if(PINC.1==0)key='2';
                 _0x27:
0001e0 9999      	SBIC 0x13,1
0001e1 c002      	RJMP _0x29
0001e2 e3e2      	LDI  R30,LOW(50)
0001e3 c003      	RJMP _0x49
                 ; 0000 00D4     else if(PINC.2==0)key='3';
                 _0x29:
0001e4 999a      	SBIC 0x13,2
0001e5 c002      	RJMP _0x2B
0001e6 e3e3      	LDI  R30,LOW(51)
                 _0x49:
0001e7 2e5e      	MOV  R5,R30
                 ; 0000 00D5     PORTC.3=1;
                 _0x2B:
0001e8 9aab      	SBI  0x15,3
                 ; 0000 00D6     //Row2
                 ; 0000 00D7     PORTC.4=0;
0001e9 98ac      	CBI  0x15,4
                 ; 0000 00D8     delay_ms(2);
0001ea 940e 0451 	CALL SUBOPT_0x4
                 ; 0000 00D9     if(PINC.0==0)key='4';
0001ec 9998      	SBIC 0x13,0
0001ed c002      	RJMP _0x30
0001ee e3e4      	LDI  R30,LOW(52)
0001ef c007      	RJMP _0x4A
                 ; 0000 00DA     else if(PINC.1==0)key='5';
                 _0x30:
0001f0 9999      	SBIC 0x13,1
0001f1 c002      	RJMP _0x32
0001f2 e3e5      	LDI  R30,LOW(53)
0001f3 c003      	RJMP _0x4A
                 ; 0000 00DB     else if(PINC.2==0)key='6';
                 _0x32:
0001f4 999a      	SBIC 0x13,2
0001f5 c002      	RJMP _0x34
0001f6 e3e6      	LDI  R30,LOW(54)
                 _0x4A:
0001f7 2e5e      	MOV  R5,R30
                 ; 0000 00DC     PORTC.4=1;
                 _0x34:
0001f8 9aac      	SBI  0x15,4
                 ; 0000 00DD     //Row3
                 ; 0000 00DE     PORTC.5=0;
0001f9 98ad      	CBI  0x15,5
                 ; 0000 00DF     delay_ms(2);
0001fa 940e 0451 	CALL SUBOPT_0x4
                 ; 0000 00E0     if(PINC.0==0)key='7';
0001fc 9998      	SBIC 0x13,0
0001fd c002      	RJMP _0x39
0001fe e3e7      	LDI  R30,LOW(55)
0001ff c007      	RJMP _0x4B
                 ; 0000 00E1     else if(PINC.1==0)key='8';
                 _0x39:
000200 9999      	SBIC 0x13,1
000201 c002      	RJMP _0x3B
000202 e3e8      	LDI  R30,LOW(56)
000203 c003      	RJMP _0x4B
                 ; 0000 00E2     else if(PINC.2==0)key='9';
                 _0x3B:
000204 999a      	SBIC 0x13,2
000205 c002      	RJMP _0x3D
000206 e3e9      	LDI  R30,LOW(57)
                 _0x4B:
000207 2e5e      	MOV  R5,R30
                 ; 0000 00E3     PORTC.5=1;
                 _0x3D:
000208 9aad      	SBI  0x15,5
                 ; 0000 00E4     //Row4
                 ; 0000 00E5     PORTC.6=0;
000209 98ae      	CBI  0x15,6
                 ; 0000 00E6     delay_ms(2);
00020a 940e 0451 	CALL SUBOPT_0x4
                 ; 0000 00E7     if(PINC.0==0)key='*';
00020c 9998      	SBIC 0x13,0
00020d c002      	RJMP _0x42
00020e e2ea      	LDI  R30,LOW(42)
00020f c007      	RJMP _0x4C
                 ; 0000 00E8     else if(PINC.1==0)key='0';
                 _0x42:
000210 9999      	SBIC 0x13,1
000211 c002      	RJMP _0x44
000212 e3e0      	LDI  R30,LOW(48)
000213 c003      	RJMP _0x4C
                 ; 0000 00E9     else if(PINC.2==0)key='#';
                 _0x44:
000214 999a      	SBIC 0x13,2
000215 c002      	RJMP _0x46
000216 e2e3      	LDI  R30,LOW(35)
                 _0x4C:
000217 2e5e      	MOV  R5,R30
                 ; 0000 00EA     PORTC.6=1;
                 _0x46:
000218 9aae      	SBI  0x15,6
                 ; 0000 00EB }
000219 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00021a 93aa      	ST   -Y,R26
00021b b3eb      	IN   R30,0x1B
00021c 70ef      	ANDI R30,LOW(0xF)
00021d 2fae      	MOV  R26,R30
00021e 81e8      	LD   R30,Y
00021f 7fe0      	ANDI R30,LOW(0xF0)
000220 2bea      	OR   R30,R26
000221 bbeb      	OUT  0x1B,R30
                +
000222 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000223 958a     +DEC R24
000224 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000225 9ada      	SBI  0x1B,2
                +
000226 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000227 958a     +DEC R24
000228 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000229 98da      	CBI  0x1B,2
                +
00022a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00022b 958a     +DEC R24
00022c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00022d 940c 02bc 	JMP  _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00022f 93aa      	ST   -Y,R26
000230 81a8      	LD   R26,Y
000231 dfe8      	RCALL __lcd_write_nibble_G100
000232 81e8          ld    r30,y
000233 95e2          swap  r30
000234 83e8          st    y,r30
000235 81a8      	LD   R26,Y
000236 dfe3      	RCALL __lcd_write_nibble_G100
                +
000237 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000238 958a     +DEC R24
000239 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00023a c081      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00023b 93aa      	ST   -Y,R26
00023c 81e8      	LD   R30,Y
00023d e0f0      	LDI  R31,0
00023e 54e3      	SUBI R30,LOW(-__base_y_G100)
00023f 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000240 81e0      	LD   R30,Z
000241 81a9      	LDD  R26,Y+1
000242 0fae      	ADD  R26,R30
000243 dfeb      	RCALL __lcd_write_data
000244 81e9      	LDD  R30,Y+1
000245 93e0 02c1 	STS  __lcd_x,R30
000247 81e8      	LD   R30,Y
000248 93e0 02c2 	STS  __lcd_y,R30
00024a 9622      	ADIW R28,2
00024b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00024c e0a2      	LDI  R26,LOW(2)
00024d 940e 0455 	CALL SUBOPT_0x5
00024f e0ac      	LDI  R26,LOW(12)
000250 dfde      	RCALL __lcd_write_data
000251 e0a1      	LDI  R26,LOW(1)
000252 940e 0455 	CALL SUBOPT_0x5
000254 e0e0      	LDI  R30,LOW(0)
000255 93e0 02c2 	STS  __lcd_y,R30
000257 93e0 02c1 	STS  __lcd_x,R30
000259 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00025a 93aa      	ST   -Y,R26
00025b 81a8      	LD   R26,Y
00025c 30aa      	CPI  R26,LOW(0xA)
00025d f031      	BREQ _0x2000005
00025e 91e0 02c3 	LDS  R30,__lcd_maxx
000260 91a0 02c1 	LDS  R26,__lcd_x
000262 17ae      	CP   R26,R30
000263 f060      	BRLO _0x2000004
                 _0x2000005:
000264 e0e0      	LDI  R30,LOW(0)
000265 93ea      	ST   -Y,R30
000266 91a0 02c2 	LDS  R26,__lcd_y
000268 5faf      	SUBI R26,-LOW(1)
000269 93a0 02c2 	STS  __lcd_y,R26
00026b dfcf      	RCALL _lcd_gotoxy
00026c 81a8      	LD   R26,Y
00026d 30aa      	CPI  R26,LOW(0xA)
00026e f409      	BRNE _0x2000007
00026f c04c      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
000270 91e0 02c1 	LDS  R30,__lcd_x
000272 5fef      	SUBI R30,-LOW(1)
000273 93e0 02c1 	STS  __lcd_x,R30
000275 9ad8      	SBI  0x1B,0
000276 81a8      	LD   R26,Y
000277 dfb7      	RCALL __lcd_write_data
000278 98d8      	CBI  0x1B,0
000279 c042      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00027a 93ba      	ST   -Y,R27
00027b 93aa      	ST   -Y,R26
00027c 931a      	ST   -Y,R17
                 _0x2000008:
00027d 81a9      	LDD  R26,Y+1
00027e 81ba      	LDD  R27,Y+1+1
00027f 91ed      	LD   R30,X+
000280 83a9      	STD  Y+1,R26
000281 83ba      	STD  Y+1+1,R27
000282 2f1e      	MOV  R17,R30
000283 30e0      	CPI  R30,0
000284 f019      	BREQ _0x200000A
000285 2fa1      	MOV  R26,R17
000286 dfd3      	RCALL _lcd_putchar
000287 cff5      	RJMP _0x2000008
                 _0x200000A:
000288 8118      	LDD  R17,Y+0
000289 c03f      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00028a 93aa      	ST   -Y,R26
00028b b3ea      	IN   R30,0x1A
00028c 6fe0      	ORI  R30,LOW(0xF0)
00028d bbea      	OUT  0x1A,R30
00028e 9ad2      	SBI  0x1A,2
00028f 9ad0      	SBI  0x1A,0
000290 9ad1      	SBI  0x1A,1
000291 98da      	CBI  0x1B,2
000292 98d8      	CBI  0x1B,0
000293 98d9      	CBI  0x1B,1
000294 81e8      	LD   R30,Y
000295 93e0 02c3 	STS  __lcd_maxx,R30
000297 58e0      	SUBI R30,-LOW(128)
                +
000298 93e0 02bf+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00029a 81e8      	LD   R30,Y
00029b 54e0      	SUBI R30,-LOW(192)
                +
00029c 93e0 02c0+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00029e e1a4      	LDI  R26,LOW(20)
00029f e0b0      	LDI  R27,0
0002a0 940e 0487 	CALL _delay_ms
0002a2 940e 045b 	CALL SUBOPT_0x6
0002a4 940e 045b 	CALL SUBOPT_0x6
0002a6 940e 045b 	CALL SUBOPT_0x6
0002a8 e2a0      	LDI  R26,LOW(32)
0002a9 df70      	RCALL __lcd_write_nibble_G100
                +
0002aa e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002ab 958a     +DEC R24
0002ac f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002ad e2a8      	LDI  R26,LOW(40)
0002ae df80      	RCALL __lcd_write_data
0002af e0a4      	LDI  R26,LOW(4)
0002b0 df7e      	RCALL __lcd_write_data
0002b1 e8a5      	LDI  R26,LOW(133)
0002b2 df7c      	RCALL __lcd_write_data
0002b3 e0a6      	LDI  R26,LOW(6)
0002b4 df7a      	RCALL __lcd_write_data
0002b5 df96      	RCALL _lcd_clear
0002b6 c005      	RJMP _0x20C0002
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0002b7 93aa      	ST   -Y,R26
                 putchar0:
0002b8 9b5d           sbis usr,udre
0002b9 cffe           rjmp putchar0
0002ba 81e8           ld   r30,y
0002bb b9ec           out  udr,r30
                 _0x20C0002:
0002bc 9621      	ADIW R28,1
0002bd 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0002be 93ba      	ST   -Y,R27
0002bf 93aa      	ST   -Y,R26
0002c0 81aa      	LDD  R26,Y+2
0002c1 dff5      	RCALL _putchar
0002c2 81a8      	LD   R26,Y
0002c3 81b9      	LDD  R27,Y+1
0002c4 91ed      	LD   R30,X+
0002c5 91fd      	LD   R31,X+
0002c6 9631      	ADIW R30,1
0002c7 93fe      	ST   -X,R31
0002c8 93ee      	ST   -X,R30
                 _0x20C0001:
0002c9 9623      	ADIW R28,3
0002ca 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002cb 93ba      	ST   -Y,R27
0002cc 93aa      	ST   -Y,R26
0002cd 9726      	SBIW R28,6
0002ce 940e 04a6 	CALL __SAVELOCR6
0002d0 e010      	LDI  R17,0
0002d1 85ac      	LDD  R26,Y+12
0002d2 85bd      	LDD  R27,Y+12+1
0002d3 e0e0      	LDI  R30,LOW(0)
0002d4 e0f0      	LDI  R31,HIGH(0)
0002d5 93ed      	ST   X+,R30
0002d6 93fc      	ST   X,R31
                 _0x2020016:
0002d7 89ea      	LDD  R30,Y+18
0002d8 89fb      	LDD  R31,Y+18+1
0002d9 9631      	ADIW R30,1
0002da 8bea      	STD  Y+18,R30
0002db 8bfb      	STD  Y+18+1,R31
0002dc 9731      	SBIW R30,1
0002dd 91e4      	LPM  R30,Z
0002de 2f2e      	MOV  R18,R30
0002df 30e0      	CPI  R30,0
0002e0 f409      	BRNE PC+2
0002e1 c115      	RJMP _0x2020018
0002e2 2fe1      	MOV  R30,R17
0002e3 30e0      	CPI  R30,0
0002e4 f439      	BRNE _0x202001C
0002e5 3225      	CPI  R18,37
0002e6 f411      	BRNE _0x202001D
0002e7 e011      	LDI  R17,LOW(1)
0002e8 c002      	RJMP _0x202001E
                 _0x202001D:
0002e9 940e 0462 	CALL SUBOPT_0x7
                 _0x202001E:
0002eb c10a      	RJMP _0x202001B
                 _0x202001C:
0002ec 30e1      	CPI  R30,LOW(0x1)
0002ed f4a9      	BRNE _0x202001F
0002ee 3225      	CPI  R18,37
0002ef f419      	BRNE _0x2020020
0002f0 940e 0462 	CALL SUBOPT_0x7
0002f2 c102      	RJMP _0x20200CC
                 _0x2020020:
0002f3 e012      	LDI  R17,LOW(2)
0002f4 e040      	LDI  R20,LOW(0)
0002f5 e000      	LDI  R16,LOW(0)
0002f6 322d      	CPI  R18,45
0002f7 f411      	BRNE _0x2020021
0002f8 e001      	LDI  R16,LOW(1)
0002f9 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002fa 322b      	CPI  R18,43
0002fb f411      	BRNE _0x2020022
0002fc e24b      	LDI  R20,LOW(43)
0002fd c0f8      	RJMP _0x202001B
                 _0x2020022:
0002fe 3220      	CPI  R18,32
0002ff f411      	BRNE _0x2020023
000300 e240      	LDI  R20,LOW(32)
000301 c0f4      	RJMP _0x202001B
                 _0x2020023:
000302 c002      	RJMP _0x2020024
                 _0x202001F:
000303 30e2      	CPI  R30,LOW(0x2)
000304 f439      	BRNE _0x2020025
                 _0x2020024:
000305 e050      	LDI  R21,LOW(0)
000306 e013      	LDI  R17,LOW(3)
000307 3320      	CPI  R18,48
000308 f411      	BRNE _0x2020026
000309 6800      	ORI  R16,LOW(128)
00030a c0eb      	RJMP _0x202001B
                 _0x2020026:
00030b c003      	RJMP _0x2020027
                 _0x2020025:
00030c 30e3      	CPI  R30,LOW(0x3)
00030d f009      	BREQ PC+2
00030e c0e7      	RJMP _0x202001B
                 _0x2020027:
00030f 3320      	CPI  R18,48
000310 f010      	BRLO _0x202002A
000311 332a      	CPI  R18,58
000312 f008      	BRLO _0x202002B
                 _0x202002A:
000313 c007      	RJMP _0x2020029
                 _0x202002B:
000314 e0aa      	LDI  R26,LOW(10)
000315 9f5a      	MUL  R21,R26
000316 2d50      	MOV  R21,R0
000317 2fe2      	MOV  R30,R18
000318 53e0      	SUBI R30,LOW(48)
000319 0f5e      	ADD  R21,R30
00031a c0db      	RJMP _0x202001B
                 _0x2020029:
00031b 2fe2      	MOV  R30,R18
00031c 36e3      	CPI  R30,LOW(0x63)
00031d f449      	BRNE _0x202002F
00031e 940e 0469 	CALL SUBOPT_0x8
000320 89e8      	LDD  R30,Y+16
000321 89f9      	LDD  R31,Y+16+1
000322 81a4      	LDD  R26,Z+4
000323 93aa      	ST   -Y,R26
000324 940e 046f 	CALL SUBOPT_0x9
000326 c0ce      	RJMP _0x2020030
                 _0x202002F:
000327 37e3      	CPI  R30,LOW(0x73)
000328 f441      	BRNE _0x2020032
000329 940e 0469 	CALL SUBOPT_0x8
00032b 940e 0475 	CALL SUBOPT_0xA
00032d 940e 0424 	CALL _strlen
00032f 2f1e      	MOV  R17,R30
000330 c00a      	RJMP _0x2020033
                 _0x2020032:
000331 37e0      	CPI  R30,LOW(0x70)
000332 f461      	BRNE _0x2020035
000333 940e 0469 	CALL SUBOPT_0x8
000335 940e 0475 	CALL SUBOPT_0xA
000337 940e 0430 	CALL _strlenf
000339 2f1e      	MOV  R17,R30
00033a 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00033b 6002      	ORI  R16,LOW(2)
00033c 770f      	ANDI R16,LOW(127)
00033d e030      	LDI  R19,LOW(0)
00033e c034      	RJMP _0x2020036
                 _0x2020035:
00033f 36e4      	CPI  R30,LOW(0x64)
000340 f011      	BREQ _0x2020039
000341 36e9      	CPI  R30,LOW(0x69)
000342 f411      	BRNE _0x202003A
                 _0x2020039:
000343 6004      	ORI  R16,LOW(4)
000344 c002      	RJMP _0x202003B
                 _0x202003A:
000345 37e5      	CPI  R30,LOW(0x75)
000346 f431      	BRNE _0x202003C
                 _0x202003B:
000347 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000348 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000349 83ee      	STD  Y+6,R30
00034a 83ff      	STD  Y+6+1,R31
00034b e015      	LDI  R17,LOW(5)
00034c c00c      	RJMP _0x202003D
                 _0x202003C:
00034d 35e8      	CPI  R30,LOW(0x58)
00034e f411      	BRNE _0x202003F
00034f 6008      	ORI  R16,LOW(8)
000350 c003      	RJMP _0x2020040
                 _0x202003F:
000351 37e8      	CPI  R30,LOW(0x78)
000352 f009      	BREQ PC+2
000353 c0a1      	RJMP _0x2020071
                 _0x2020040:
000354 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000355 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000356 83ee      	STD  Y+6,R30
000357 83ff      	STD  Y+6+1,R31
000358 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000359 ff02      	SBRS R16,2
00035a c014      	RJMP _0x2020042
00035b 940e 0469 	CALL SUBOPT_0x8
00035d 940e 047f 	CALL SUBOPT_0xB
00035f 85ab      	LDD  R26,Y+11
000360 23aa      	TST  R26
000361 f43a      	BRPL _0x2020043
000362 85ea      	LDD  R30,Y+10
000363 85fb      	LDD  R31,Y+10+1
000364 940e 0495 	CALL __ANEGW1
000366 87ea      	STD  Y+10,R30
000367 87fb      	STD  Y+10+1,R31
000368 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000369 3040      	CPI  R20,0
00036a f011      	BREQ _0x2020044
00036b 5f1f      	SUBI R17,-LOW(1)
00036c c001      	RJMP _0x2020045
                 _0x2020044:
00036d 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00036e c004      	RJMP _0x2020046
                 _0x2020042:
00036f 940e 0469 	CALL SUBOPT_0x8
000371 940e 047f 	CALL SUBOPT_0xB
                 _0x2020046:
                 _0x2020036:
000373 fd00      	SBRC R16,0
000374 c011      	RJMP _0x2020047
                 _0x2020048:
000375 1715      	CP   R17,R21
000376 f478      	BRSH _0x202004A
000377 ff07      	SBRS R16,7
000378 c008      	RJMP _0x202004B
000379 ff02      	SBRS R16,2
00037a c004      	RJMP _0x202004C
00037b 7f0b      	ANDI R16,LOW(251)
00037c 2f24      	MOV  R18,R20
00037d 5011      	SUBI R17,LOW(1)
00037e c001      	RJMP _0x202004D
                 _0x202004C:
00037f e320      	LDI  R18,LOW(48)
                 _0x202004D:
000380 c001      	RJMP _0x202004E
                 _0x202004B:
000381 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000382 940e 0462 	CALL SUBOPT_0x7
000384 5051      	SUBI R21,LOW(1)
000385 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000386 2f31      	MOV  R19,R17
000387 ff01      	SBRS R16,1
000388 c017      	RJMP _0x202004F
                 _0x2020050:
000389 3030      	CPI  R19,0
00038a f0a1      	BREQ _0x2020052
00038b ff03      	SBRS R16,3
00038c c006      	RJMP _0x2020053
00038d 81ee      	LDD  R30,Y+6
00038e 81ff      	LDD  R31,Y+6+1
00038f 9125      	LPM  R18,Z+
000390 83ee      	STD  Y+6,R30
000391 83ff      	STD  Y+6+1,R31
000392 c005      	RJMP _0x2020054
                 _0x2020053:
000393 81ae      	LDD  R26,Y+6
000394 81bf      	LDD  R27,Y+6+1
000395 912d      	LD   R18,X+
000396 83ae      	STD  Y+6,R26
000397 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000398 940e 0462 	CALL SUBOPT_0x7
00039a 3050      	CPI  R21,0
00039b f009      	BREQ _0x2020055
00039c 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00039d 5031      	SUBI R19,LOW(1)
00039e cfea      	RJMP _0x2020050
                 _0x2020052:
00039f c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003a0 e320      	LDI  R18,LOW(48)
0003a1 81ee      	LDD  R30,Y+6
0003a2 81ff      	LDD  R31,Y+6+1
0003a3 940e 049d 	CALL __GETW1PF
0003a5 87e8      	STD  Y+8,R30
0003a6 87f9      	STD  Y+8+1,R31
0003a7 81ee      	LDD  R30,Y+6
0003a8 81ff      	LDD  R31,Y+6+1
0003a9 9632      	ADIW R30,2
0003aa 83ee      	STD  Y+6,R30
0003ab 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003ac 85e8      	LDD  R30,Y+8
0003ad 85f9      	LDD  R31,Y+8+1
0003ae 85aa      	LDD  R26,Y+10
0003af 85bb      	LDD  R27,Y+10+1
0003b0 17ae      	CP   R26,R30
0003b1 07bf      	CPC  R27,R31
0003b2 f050      	BRLO _0x202005C
0003b3 5f2f      	SUBI R18,-LOW(1)
0003b4 85a8      	LDD  R26,Y+8
0003b5 85b9      	LDD  R27,Y+8+1
0003b6 85ea      	LDD  R30,Y+10
0003b7 85fb      	LDD  R31,Y+10+1
0003b8 1bea      	SUB  R30,R26
0003b9 0bfb      	SBC  R31,R27
0003ba 87ea      	STD  Y+10,R30
0003bb 87fb      	STD  Y+10+1,R31
0003bc cfef      	RJMP _0x202005A
                 _0x202005C:
0003bd 332a      	CPI  R18,58
0003be f028      	BRLO _0x202005D
0003bf ff03      	SBRS R16,3
0003c0 c002      	RJMP _0x202005E
0003c1 5f29      	SUBI R18,-LOW(7)
0003c2 c001      	RJMP _0x202005F
                 _0x202005E:
0003c3 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003c4 fd04      	SBRC R16,4
0003c5 c01a      	RJMP _0x2020061
0003c6 3321      	CPI  R18,49
0003c7 f420      	BRSH _0x2020063
0003c8 85a8      	LDD  R26,Y+8
0003c9 85b9      	LDD  R27,Y+8+1
0003ca 9711      	SBIW R26,1
0003cb f409      	BRNE _0x2020062
                 _0x2020063:
0003cc c009      	RJMP _0x20200CD
                 _0x2020062:
0003cd 1753      	CP   R21,R19
0003ce f010      	BRLO _0x2020067
0003cf ff00      	SBRS R16,0
0003d0 c001      	RJMP _0x2020068
                 _0x2020067:
0003d1 c013      	RJMP _0x2020066
                 _0x2020068:
0003d2 e220      	LDI  R18,LOW(32)
0003d3 ff07      	SBRS R16,7
0003d4 c00b      	RJMP _0x2020069
0003d5 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003d6 6100      	ORI  R16,LOW(16)
0003d7 ff02      	SBRS R16,2
0003d8 c007      	RJMP _0x202006A
0003d9 7f0b      	ANDI R16,LOW(251)
0003da 934a      	ST   -Y,R20
0003db 940e 046f 	CALL SUBOPT_0x9
0003dd 3050      	CPI  R21,0
0003de f009      	BREQ _0x202006B
0003df 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003e0 940e 0462 	CALL SUBOPT_0x7
0003e2 3050      	CPI  R21,0
0003e3 f009      	BREQ _0x202006C
0003e4 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003e5 5031      	SUBI R19,LOW(1)
0003e6 85a8      	LDD  R26,Y+8
0003e7 85b9      	LDD  R27,Y+8+1
0003e8 9712      	SBIW R26,2
0003e9 f008      	BRLO _0x2020059
0003ea cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003eb ff00      	SBRS R16,0
0003ec c008      	RJMP _0x202006D
                 _0x202006E:
0003ed 3050      	CPI  R21,0
0003ee f031      	BREQ _0x2020070
0003ef 5051      	SUBI R21,LOW(1)
0003f0 e2e0      	LDI  R30,LOW(32)
0003f1 93ea      	ST   -Y,R30
0003f2 940e 046f 	CALL SUBOPT_0x9
0003f4 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003f5 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003f6 cee0      	RJMP _0x2020016
                 _0x2020018:
0003f7 85ac      	LDD  R26,Y+12
0003f8 85bd      	LDD  R27,Y+12+1
0003f9 940e 0499 	CALL __GETW1P
0003fb 940e 04ad 	CALL __LOADLOCR6
0003fd 9664      	ADIW R28,20
0003fe 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0003ff 92ff      	PUSH R15
000400 2ef8      	MOV  R15,R24
000401 9726      	SBIW R28,6
000402 931a      	ST   -Y,R17
000403 930a      	ST   -Y,R16
000404 01de      	MOVW R26,R28
000405 9614      	ADIW R26,4
000406 940e 0491 	CALL __ADDW2R15
000408 018d      	MOVW R16,R26
000409 e0e0      	LDI  R30,LOW(0)
00040a 83ec      	STD  Y+4,R30
00040b 83ed      	STD  Y+4+1,R30
00040c 83ee      	STD  Y+6,R30
00040d 83ef      	STD  Y+6+1,R30
00040e 01de      	MOVW R26,R28
00040f 9618      	ADIW R26,8
000410 940e 0491 	CALL __ADDW2R15
000412 940e 0499 	CALL __GETW1P
000414 93fa      	ST   -Y,R31
000415 93ea      	ST   -Y,R30
000416 931a      	ST   -Y,R17
000417 930a      	ST   -Y,R16
000418 ebee      	LDI  R30,LOW(_put_usart_G101)
000419 e0f2      	LDI  R31,HIGH(_put_usart_G101)
00041a 93fa      	ST   -Y,R31
00041b 93ea      	ST   -Y,R30
00041c 01de      	MOVW R26,R28
00041d 9618      	ADIW R26,8
00041e deac      	RCALL __print_G101
00041f 8119      	LDD  R17,Y+1
000420 8108      	LDD  R16,Y+0
000421 9628      	ADIW R28,8
000422 90ff      	POP  R15
000423 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000424 93ba      	ST   -Y,R27
000425 93aa      	ST   -Y,R26
000426 91a9          ld   r26,y+
000427 91b9          ld   r27,y+
000428 27ee          clr  r30
000429 27ff          clr  r31
                 strlen0:
00042a 916d          ld   r22,x+
00042b 2366          tst  r22
00042c f011          breq strlen1
00042d 9631          adiw r30,1
00042e cffb          rjmp strlen0
                 strlen1:
00042f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000430 93ba      	ST   -Y,R27
000431 93aa      	ST   -Y,R26
000432 27aa          clr  r26
000433 27bb          clr  r27
000434 91e9          ld   r30,y+
000435 91f9          ld   r31,y+
                 strlenf0:
000436 9005      	lpm  r0,z+
000437 2000          tst  r0
000438 f011          breq strlenf1
000439 9611          adiw r26,1
00043a cffb          rjmp strlenf0
                 strlenf1:
00043b 01fd          movw r30,r26
00043c 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _message:
0002a1           	.BYTE 0x14
                 _rx_buffer:
0002b5           	.BYTE 0x8
                 __base_y_G100:
0002bd           	.BYTE 0x4
                 __lcd_x:
0002c1           	.BYTE 0x1
                 __lcd_y:
0002c2           	.BYTE 0x1
                 __lcd_maxx:
0002c3           	.BYTE 0x1
                 __seed_G102:
0002c4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00043d e0e0      	LDI  R30,LOW(0)
00043e 93ea      	ST   -Y,R30
00043f e0a1      	LDI  R26,LOW(1)
000440 940c 023b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000442 eaa1      	LDI  R26,LOW(_message)
000443 e0b2      	LDI  R27,HIGH(_message)
000444 0da6      	ADD  R26,R6
000445 1db7      	ADC  R27,R7
000446 91ac      	LD   R26,X
000447 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000448 eca8      	LDI  R26,LOW(200)
000449 e0b0      	LDI  R27,0
00044a 940c 0487 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00044c 2766      	CLR  R22
00044d 2777      	CLR  R23
00044e 940e 04a1 	CALL __PUTPARD1
000450 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000451 e0a2      	LDI  R26,LOW(2)
000452 e0b0      	LDI  R27,0
000453 940c 0487 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000455 940e 022f 	CALL __lcd_write_data
000457 e0a3      	LDI  R26,LOW(3)
000458 e0b0      	LDI  R27,0
000459 940c 0487 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
00045b e3a0      	LDI  R26,LOW(48)
00045c 940e 021a 	CALL __lcd_write_nibble_G100
                +
00045e e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00045f 958a     +DEC R24
000460 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000461 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
000462 932a      	ST   -Y,R18
000463 85ad      	LDD  R26,Y+13
000464 85be      	LDD  R27,Y+13+1
000465 85ef      	LDD  R30,Y+15
000466 89f8      	LDD  R31,Y+15+1
000467 9509      	ICALL
000468 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000469 89e8      	LDD  R30,Y+16
00046a 89f9      	LDD  R31,Y+16+1
00046b 9734      	SBIW R30,4
00046c 8be8      	STD  Y+16,R30
00046d 8bf9      	STD  Y+16+1,R31
00046e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00046f 85ad      	LDD  R26,Y+13
000470 85be      	LDD  R27,Y+13+1
000471 85ef      	LDD  R30,Y+15
000472 89f8      	LDD  R31,Y+15+1
000473 9509      	ICALL
000474 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000475 89a8      	LDD  R26,Y+16
000476 89b9      	LDD  R27,Y+16+1
000477 9614      	ADIW R26,4
000478 940e 0499 	CALL __GETW1P
00047a 83ee      	STD  Y+6,R30
00047b 83ff      	STD  Y+6+1,R31
00047c 81ae      	LDD  R26,Y+6
00047d 81bf      	LDD  R27,Y+6+1
00047e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
00047f 89a8      	LDD  R26,Y+16
000480 89b9      	LDD  R27,Y+16+1
000481 9614      	ADIW R26,4
000482 940e 0499 	CALL __GETW1P
000484 87ea      	STD  Y+10,R30
000485 87fb      	STD  Y+10+1,R31
000486 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000487 9610      	adiw r26,0
000488 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000489 ef8a     +LDI R24 , LOW ( 0xFA )
00048a e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00048b 9701     +SBIW R24 , 1
00048c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00048d 95a8      	wdr
00048e 9711      	sbiw r26,1
00048f f7c9      	brne __delay_ms0
                 __delay_ms1:
000490 9508      	ret
                 
                 __ADDW2R15:
000491 2400      	CLR  R0
000492 0daf      	ADD  R26,R15
000493 1db0      	ADC  R27,R0
000494 9508      	RET
                 
                 __ANEGW1:
000495 95f1      	NEG  R31
000496 95e1      	NEG  R30
000497 40f0      	SBCI R31,0
000498 9508      	RET
                 
                 __GETW1P:
000499 91ed      	LD   R30,X+
00049a 91fc      	LD   R31,X
00049b 9711      	SBIW R26,1
00049c 9508      	RET
                 
                 __GETW1PF:
00049d 9005      	LPM  R0,Z+
00049e 91f4      	LPM  R31,Z
00049f 2de0      	MOV  R30,R0
0004a0 9508      	RET
                 
                 __PUTPARD1:
0004a1 937a      	ST   -Y,R23
0004a2 936a      	ST   -Y,R22
0004a3 93fa      	ST   -Y,R31
0004a4 93ea      	ST   -Y,R30
0004a5 9508      	RET
                 
                 __SAVELOCR6:
0004a6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004a7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004a8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004a9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004aa 931a      	ST   -Y,R17
0004ab 930a      	ST   -Y,R16
0004ac 9508      	RET
                 
                 __LOADLOCR6:
0004ad 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004ae 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004af 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004b0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004b1 8119      	LDD  R17,Y+1
0004b2 8108      	LD   R16,Y
0004b3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  16 r1 :   3 r2 :   1 r3 :   0 r4 :   4 r5 :  13 r6 :  12 r7 :   4 
r8 :   5 r9 :   2 r10:   6 r11:   5 r12:   5 r13:   4 r14:   0 r15:   6 
r16:  32 r17:  29 r18:  33 r19:  11 r20:   9 r21:  17 r22:  10 r23:   4 
r24:  25 r25:   5 r26: 118 r27:  45 r28:  13 r29:   1 r30: 234 r31:  61 
x  :  16 y  : 180 z  :  17 
Registers used: 33 out of 35 (94.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  21 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  19 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  40 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  69 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  19 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  13 cpc   :   6 cpi   :  34 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   3 jmp   :  27 ld    :  41 ldd   :  62 ldi   : 137 
lds   :   5 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  31 movw  :  21 
mul   :   2 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   7 out   :  23 pop   :   3 push  :   3 rcall :  32 ret   :  26 
reti  :   1 rjmp  :  86 rol   :   0 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :   9 sbic  :  14 sbis  :   1 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  68 std   :  30 sts   :  10 sub   :   1 subi  :  25 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000968   2224    184   2408   32768   7.3%
[.dseg] 0x000060 0x0002c8      0    104    104    2048   5.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
